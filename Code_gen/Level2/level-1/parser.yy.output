
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  optional_declaration_list procedure_definition
2: optional_declaration_list ->  <empty>
3: optional_declaration_list ->  variable_declaration_list
4: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'
5: #0001 ->  <empty>
6: #0002 ->  <empty>
7: optional_variable_declaration_list ->  <empty>
8: optional_variable_declaration_list ->  variable_declaration_list
9: variable_declaration_list ->  variable_declaration
10: variable_declaration_list ->  variable_declaration_list variable_declaration
11: variable_declaration (';') ->  declaration ';'
12: declaration (INTEGER) ->  INTEGER NAME
13: basic_block_list ->  basic_block_list basic_block
14: basic_block_list ->  basic_block
15: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list
16: executable_statement_list ->  assignment_statement_list
17: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
18: executable_statement_list ->  assignment_statement_list goto_statement
19: executable_statement_list ->  assignment_statement_list if_else_statement
20: assignment_statement_list ->  <empty>
21: assignment_statement_list ->  assignment_statement_list assignment_statement
22: atomic_expression ->  variable
23: atomic_expression ->  constant
24: atomic_expression ('(') ->  '(' expression ')'
25: unary_expression ->  atomic_expression
26: unary_expression ('-') ->  '-' unary_expression
27: expression ->  unary_expression
28: expression (LE) ->  expression LE expression
29: expression (GE) ->  expression GE expression
30: expression (LT) ->  expression LT expression
31: expression (GT) ->  expression GT expression
32: expression (NE) ->  expression NE expression
33: expression (EQ) ->  expression EQ expression
34: expression ('+') ->  expression '+' expression
35: expression ('-') ->  expression '-' expression
36: expression ('*') ->  expression '*' expression
37: expression ('/') ->  expression '/' expression
38: expression ('(') ->  '(' DATA_TYPE ')' atomic_expression
39: DATA_TYPE (FLOAT) ->  FLOAT
40: DATA_TYPE (DOUBLE) ->  DOUBLE
41: DATA_TYPE (INTEGER) ->  INTEGER
42: if_else_statement (IF) ->  IF '(' expression ')' goto_statement ELSE goto_statement
43: goto_statement (GOTO) ->  GOTO BBNUM ';'
44: assignment_statement (ASSIGN) ->  variable ASSIGN expression ';'
45: variable (NAME) ->  NAME
46: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
47: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
48: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BBNUM
   259: FLOAT_NUMBER
   260: NAME
   261: RETURN
   262: INTEGER
   263: FLOAT
   264: DOUBLE
   265: ASSIGN
   266: IF
   267: ELSE
   268: GOTO
   269: NE
   270: EQ
   271: LT
   272: LE
   273: GT
   274: GE
    43: '+'
    45: '-'
    42: '*'
    47: '/'
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
48: program_$ ->  . program 
  0:   On program to state 1
  1:   On optional_declaration_list to state 2
  2:   On variable_declaration_list to state 3
  3:   On variable_declaration to state 4
  4:   On declaration to state 5
  5:   On INTEGER to state 6
  Reduce by 2: optional_declaration_list ->  . 


State 1:
48: program_$ -> program  . 


State 2:
1: program -> optional_declaration_list  . procedure_definition 
  0:   On procedure_definition to state 7
  1:   On NAME to state 8


State 3:
3: optional_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 9
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  Reduce by 3: optional_declaration_list -> variable_declaration_list  . 


State 4:
9: variable_declaration_list -> variable_declaration  . 
  Reduce by 9: variable_declaration_list -> variable_declaration  . 


State 5:
11: variable_declaration -> declaration  . ';' 
  0:   On ';' to state 10


State 6:
12: declaration -> INTEGER  . NAME 
  0:   On NAME to state 11


State 7:
1: program -> optional_declaration_list procedure_definition  . 
  Reduce by 1: program -> optional_declaration_list procedure_definition  . 


State 8:
4: procedure_definition -> NAME  . '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '(' to state 12


State 9:
10: variable_declaration_list -> variable_declaration_list variable_declaration  . 
  Reduce by 10: variable_declaration_list -> variable_declaration_list variable_declaration  . 


State 10:
11: variable_declaration -> declaration ';'  . 
  Reduce by 11: variable_declaration -> declaration ';'  . 


State 11:
12: declaration -> INTEGER NAME  . 
  Reduce by 12: declaration -> INTEGER NAME  . 


State 12:
4: procedure_definition -> NAME '('  . ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On ')' to state 13


State 13:
4: procedure_definition -> NAME '(' ')'  . #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On #0001 to state 14
  Reduce by 5: #0001 ->  . 


State 14:
4: procedure_definition -> NAME '(' ')' #0001  . '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '{' to state 15


State 15:
4: procedure_definition -> NAME '(' ')' #0001 '{'  . optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On optional_variable_declaration_list to state 16
  1:   On variable_declaration_list to state 17
  2:   On variable_declaration to state 4
  3:   On declaration to state 5
  4:   On INTEGER to state 6
  Reduce by 7: optional_variable_declaration_list ->  . 


State 16:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list  . #0002 basic_block_list '}' 
  0:   On #0002 to state 18
  Reduce by 6: #0002 ->  . 


State 17:
8: optional_variable_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 9
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  Reduce by 8: optional_variable_declaration_list -> variable_declaration_list  . 


State 18:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002  . basic_block_list '}' 
  0:   On basic_block_list to state 19
  1:   On basic_block to state 20
  2:   On BBNUM to state 21


State 19:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list  . '}' 
13: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 22
  1:   On basic_block to state 23
  2:   On BBNUM to state 21


State 20:
14: basic_block_list -> basic_block  . 
  Reduce by 14: basic_block_list -> basic_block  . 


State 21:
15: basic_block -> BBNUM  . ':' executable_statement_list 
  0:   On ':' to state 24


State 22:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 
  Reduce by 4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 


State 23:
13: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 13: basic_block_list -> basic_block_list basic_block  . 


State 24:
15: basic_block -> BBNUM ':'  . executable_statement_list 
  0:   On executable_statement_list to state 25
  1:   On assignment_statement_list to state 26
  Reduce by 20: assignment_statement_list ->  . 


State 25:
15: basic_block -> BBNUM ':' executable_statement_list  . 
  Reduce by 15: basic_block -> BBNUM ':' executable_statement_list  . 


State 26:
16: executable_statement_list -> assignment_statement_list  . 
17: executable_statement_list -> assignment_statement_list  . RETURN ';' 
18: executable_statement_list -> assignment_statement_list  . goto_statement 
19: executable_statement_list -> assignment_statement_list  . if_else_statement 
21: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 27
  1:   On goto_statement to state 28
  2:   On if_else_statement to state 29
  3:   On assignment_statement to state 30
  4:   On GOTO to state 31
  5:   On IF to state 32
  6:   On variable to state 33
  7:   On NAME to state 34
  Reduce by 16: executable_statement_list -> assignment_statement_list  . 


State 27:
17: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 35


State 28:
18: executable_statement_list -> assignment_statement_list goto_statement  . 
  Reduce by 18: executable_statement_list -> assignment_statement_list goto_statement  . 


State 29:
19: executable_statement_list -> assignment_statement_list if_else_statement  . 
  Reduce by 19: executable_statement_list -> assignment_statement_list if_else_statement  . 


State 30:
21: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 21: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 31:
43: goto_statement -> GOTO  . BBNUM ';' 
  0:   On BBNUM to state 36


State 32:
42: if_else_statement -> IF  . '(' expression ')' goto_statement ELSE goto_statement 
  0:   On '(' to state 37


State 33:
44: assignment_statement -> variable  . ASSIGN expression ';' 
  0:   On ASSIGN to state 38


State 34:
45: variable -> NAME  . 
  Reduce by 45: variable -> NAME  . 


State 35:
17: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 17: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 36:
43: goto_statement -> GOTO BBNUM  . ';' 
  0:   On ';' to state 39


State 37:
42: if_else_statement -> IF '('  . expression ')' goto_statement ELSE goto_statement 
  0:   On expression to state 40
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 38:
44: assignment_statement -> variable ASSIGN  . expression ';' 
  0:   On expression to state 49
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 39:
43: goto_statement -> GOTO BBNUM ';'  . 
  Reduce by 43: goto_statement -> GOTO BBNUM ';'  . 


State 40:
42: if_else_statement -> IF '(' expression  . ')' goto_statement ELSE goto_statement 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0:   On ')' to state 50
  1:   On LE to state 51
  2:   On GE to state 52
  3:   On LT to state 53
  4:   On GT to state 54
  5:   On NE to state 55
  6:   On EQ to state 56
  7:   On '+' to state 57
  8:   On '-' to state 58
  9:   On '*' to state 59
  10:   On '/' to state 60


State 41:
27: expression -> unary_expression  . 
  Reduce by 27: expression -> unary_expression  . 


State 42:
38: expression -> '('  . DATA_TYPE ')' atomic_expression 
24: atomic_expression -> '('  . expression ')' 
  0:   On DATA_TYPE to state 61
  1:   On expression to state 62
  2:   On FLOAT to state 63
  3:   On DOUBLE to state 64
  4:   On INTEGER to state 65
  5:   On unary_expression to state 41
  6:   On '(' to state 42
  7:   On atomic_expression to state 43
  8:   On '-' to state 44
  9:   On variable to state 45
  10:   On constant to state 46
  11:   On NAME to state 34
  12:   On INTEGER_NUMBER to state 47
  13:   On FLOAT_NUMBER to state 48


State 43:
25: unary_expression -> atomic_expression  . 
  Reduce by 25: unary_expression -> atomic_expression  . 


State 44:
26: unary_expression -> '-'  . unary_expression 
  0:   On unary_expression to state 66
  1:   On atomic_expression to state 43
  2:   On '-' to state 44
  3:   On variable to state 45
  4:   On constant to state 46
  5:   On '(' to state 67
  6:   On NAME to state 34
  7:   On INTEGER_NUMBER to state 47
  8:   On FLOAT_NUMBER to state 48


State 45:
22: atomic_expression -> variable  . 
  Reduce by 22: atomic_expression -> variable  . 


State 46:
23: atomic_expression -> constant  . 
  Reduce by 23: atomic_expression -> constant  . 


State 47:
46: constant -> INTEGER_NUMBER  . 
  Reduce by 46: constant -> INTEGER_NUMBER  . 


State 48:
47: constant -> FLOAT_NUMBER  . 
  Reduce by 47: constant -> FLOAT_NUMBER  . 


State 49:
44: assignment_statement -> variable ASSIGN expression  . ';' 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0:   On ';' to state 68
  1:   On LE to state 51
  2:   On GE to state 52
  3:   On LT to state 53
  4:   On GT to state 54
  5:   On NE to state 55
  6:   On EQ to state 56
  7:   On '+' to state 57
  8:   On '-' to state 58
  9:   On '*' to state 59
  10:   On '/' to state 60


State 50:
42: if_else_statement -> IF '(' expression ')'  . goto_statement ELSE goto_statement 
  0:   On goto_statement to state 69
  1:   On GOTO to state 31


State 51:
28: expression -> expression LE  . expression 
  0:   On expression to state 70
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 52:
29: expression -> expression GE  . expression 
  0:   On expression to state 71
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 53:
30: expression -> expression LT  . expression 
  0:   On expression to state 72
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 54:
31: expression -> expression GT  . expression 
  0:   On expression to state 73
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 55:
32: expression -> expression NE  . expression 
  0:   On expression to state 74
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 56:
33: expression -> expression EQ  . expression 
  0:   On expression to state 75
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 57:
34: expression -> expression '+'  . expression 
  0:   On expression to state 76
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 58:
35: expression -> expression '-'  . expression 
  0:   On expression to state 77
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 59:
36: expression -> expression '*'  . expression 
  0:   On expression to state 78
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 60:
37: expression -> expression '/'  . expression 
  0:   On expression to state 79
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 61:
38: expression -> '(' DATA_TYPE  . ')' atomic_expression 
  0:   On ')' to state 80


State 62:
24: atomic_expression -> '(' expression  . ')' 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0:   On ')' to state 81
  1:   On LE to state 51
  2:   On GE to state 52
  3:   On LT to state 53
  4:   On GT to state 54
  5:   On NE to state 55
  6:   On EQ to state 56
  7:   On '+' to state 57
  8:   On '-' to state 58
  9:   On '*' to state 59
  10:   On '/' to state 60


State 63:
39: DATA_TYPE -> FLOAT  . 
  Reduce by 39: DATA_TYPE -> FLOAT  . 


State 64:
40: DATA_TYPE -> DOUBLE  . 
  Reduce by 40: DATA_TYPE -> DOUBLE  . 


State 65:
41: DATA_TYPE -> INTEGER  . 
  Reduce by 41: DATA_TYPE -> INTEGER  . 


State 66:
26: unary_expression -> '-' unary_expression  . 
  Reduce by 26: unary_expression -> '-' unary_expression  . 


State 67:
24: atomic_expression -> '('  . expression ')' 
  0:   On expression to state 62
  1:   On unary_expression to state 41
  2:   On '(' to state 42
  3:   On atomic_expression to state 43
  4:   On '-' to state 44
  5:   On variable to state 45
  6:   On constant to state 46
  7:   On NAME to state 34
  8:   On INTEGER_NUMBER to state 47
  9:   On FLOAT_NUMBER to state 48


State 68:
44: assignment_statement -> variable ASSIGN expression ';'  . 
  Reduce by 44: assignment_statement -> variable ASSIGN expression ';'  . 


State 69:
42: if_else_statement -> IF '(' expression ')' goto_statement  . ELSE goto_statement 
  0:   On ELSE to state 82


State 70:
28: expression -> expression LE expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6:   On '+' to state 57
  7:   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 28: expression -> expression LE expression  . 


State 71:
29: expression -> expression GE expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6:   On '+' to state 57
  7:   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 29: expression -> expression GE expression  . 


State 72:
30: expression -> expression LT expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6:   On '+' to state 57
  7:   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 30: expression -> expression LT expression  . 


State 73:
31: expression -> expression GT expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6:   On '+' to state 57
  7:   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 31: expression -> expression GT expression  . 


State 74:
32: expression -> expression NE expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0:   On LE to state 51
  1:   On GE to state 52
  2:   On LT to state 53
  3:   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6:   On '+' to state 57
  7:   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 32: expression -> expression NE expression  . 


State 75:
33: expression -> expression EQ expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0:   On LE to state 51
  1:   On GE to state 52
  2:   On LT to state 53
  3:   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6:   On '+' to state 57
  7:   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 33: expression -> expression EQ expression  . 


State 76:
34: expression -> expression '+' expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6 (removed by precedence):   On '+' to state 57
  7 (removed by precedence):   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 34: expression -> expression '+' expression  . 


State 77:
35: expression -> expression '-' expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6 (removed by precedence):   On '+' to state 57
  7 (removed by precedence):   On '-' to state 58
  8:   On '*' to state 59
  9:   On '/' to state 60
  Reduce by 35: expression -> expression '-' expression  . 


State 78:
36: expression -> expression '*' expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6 (removed by precedence):   On '+' to state 57
  7 (removed by precedence):   On '-' to state 58
  8 (removed by precedence):   On '*' to state 59
  9 (removed by precedence):   On '/' to state 60
  Reduce by 36: expression -> expression '*' expression  . 


State 79:
37: expression -> expression '/' expression  . 
28: expression -> expression  . LE expression 
29: expression -> expression  . GE expression 
30: expression -> expression  . LT expression 
31: expression -> expression  . GT expression 
32: expression -> expression  . NE expression 
33: expression -> expression  . EQ expression 
34: expression -> expression  . '+' expression 
35: expression -> expression  . '-' expression 
36: expression -> expression  . '*' expression 
37: expression -> expression  . '/' expression 
  0 (removed by precedence):   On LE to state 51
  1 (removed by precedence):   On GE to state 52
  2 (removed by precedence):   On LT to state 53
  3 (removed by precedence):   On GT to state 54
  4 (removed by precedence):   On NE to state 55
  5 (removed by precedence):   On EQ to state 56
  6 (removed by precedence):   On '+' to state 57
  7 (removed by precedence):   On '-' to state 58
  8 (removed by precedence):   On '*' to state 59
  9 (removed by precedence):   On '/' to state 60
  Reduce by 37: expression -> expression '/' expression  . 


State 80:
38: expression -> '(' DATA_TYPE ')'  . atomic_expression 
  0:   On atomic_expression to state 83
  1:   On variable to state 45
  2:   On constant to state 46
  3:   On '(' to state 67
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 47
  6:   On FLOAT_NUMBER to state 48


State 81:
24: atomic_expression -> '(' expression ')'  . 
  Reduce by 24: atomic_expression -> '(' expression ')'  . 


State 82:
42: if_else_statement -> IF '(' expression ')' goto_statement ELSE  . goto_statement 
  0:   On goto_statement to state 84
  1:   On GOTO to state 31


State 83:
38: expression -> '(' DATA_TYPE ')' atomic_expression  . 
  Reduce by 38: expression -> '(' DATA_TYPE ')' atomic_expression  . 


State 84:
42: if_else_statement -> IF '(' expression ')' goto_statement ELSE goto_statement  . 
  Reduce by 42: if_else_statement -> IF '(' expression ')' goto_statement ELSE goto_statement  . 



