  Procedure: main
  Intermediate Code Statements
label2:
 iLoad:	v0 <- 4
 store:	a <- v0
 iLoad:	v0 <- 3
 store:	b <- v0
 iLoad:	v0 <- 3
 store:	c <- v0
 load:	v0 <- a
 load:	t0 <- b
 sgt:	t1 <- v0 , t0
 load:	v0 <- c
 sge:	t0 <- t1 , v0
 bne:	t0 , zero : goto label3
 goto	label4
label3:
 iLoad:	v0 <- 6
 store:	a <- v0
 goto	label5
label4:
 iLoad:	v0 <- 6
 store:	b <- v0
label5:

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $fp, 0($sp)		# Save the frame pointer
	sub $fp, $sp, 4		# Update the frame pointer

	sub $sp, $sp, 16		# Make space for the locals
# Prologue ends

label2:
	li $v0, 4
	sw $v0, -8($fp)
	li $v0, 3
	sw $v0, -4($fp)
	li $v0, 3
	sw $v0, 0($fp)
	lw $v0, -8($fp)
	lw $t0, -4($fp)
	sgt $t1, $v0, $t0
	lw $v0, 0($fp)
	sge $t0, $t1, $v0
	bne $t0, $zero, label3
	j label4
label3:
	li $v0, 6
	sw $v0, -8($fp)
	j label5
label4:
	li $v0, 6
	sw $v0, -4($fp)
label5:

# Epilogue Begins
	add $sp, $sp, 16
	lw $fp, 0($sp)  
	jr        $31		# Jump back to the operating system.
# Epilogue Ends

