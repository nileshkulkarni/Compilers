  Procedure: main
  Intermediate Code Statements

label2:    	
	iLoad.d:    	f2 <- 2.40
	store.d:    	b <- f2
	iLoad.d:    	f2 <- 3.00
	store.d:    	c <- f2
	iLoad.d:    	f2 <- 3.00
	store.d:    	e <- f2
	iLoad.d:    	f2 <- 3.00
	store.d:    	f <- f2
	iLoad.d:    	f2 <- 3.00
	store.d:    	g <- f2
	load.d:    	f2 <- b
	load.d:    	f4 <- c
	mul.d:    	f6 <- f2 , f4
	load.d:    	f2 <- e
	add.d:    	f4 <- f6 , f2
	load.d:    	f2 <- f
	add.d:    	f6 <- f4 , f2
	load.d:    	f2 <- g
	add.d:    	f4 <- f6 , f2
	store.d:    	h <- f4
	load.d:    	f2 <- b
	load.d:    	f4 <- c
	slt:    	v0 <- f2 , f4
	store:    	a <- v0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $fp, 0($sp)		# Save the frame pointer
	sub $fp, $sp, 4		# Update the frame pointer

	sub $sp, $sp, 56		# Make space for the locals
# Prologue ends


label2:    	
	li.d $f2, 2.40
	s.d $f2, -40($fp)
	li.d $f2, 3.00
	s.d $f2, -32($fp)
	li.d $f2, 3.00
	s.d $f2, -24($fp)
	li.d $f2, 3.00
	s.d $f2, -16($fp)
	li.d $f2, 3.00
	s.d $f2, -8($fp)
	l.d $f2, -40($fp)
	l.d $f4, -32($fp)
	mul.d $f6, $f2, $f4
	l.d $f2, -24($fp)
	add.d $f4, $f6, $f2
	l.d $f2, -16($fp)
	add.d $f6, $f4, $f2
	l.d $f2, -8($fp)
	add.d $f4, $f6, $f2
	s.d $f4, 0($fp)
	l.d $f2, -40($fp)
	l.d $f4, -32($fp)
	slt $v0, $f2, $f4
	sw $v0, -48($fp)

# Epilogue Begins
	add $sp, $sp, 56
	lw $fp, 0($sp)  
	jr        $31		# Jump back to the operating system.
# Epilogue Ends

